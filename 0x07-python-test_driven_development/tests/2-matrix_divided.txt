The ``2-matrix_divided`` module
============================

Using ``matrix_divided``
---------------------

Importing function from the module:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Dividing a matrix by 3:

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Dividing a matrix by 0:

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
                ...
    ZeroDivisionError: division by zero

Dividing a matrix by a float number:

    >>> matrix_divided([[10, 20, 30], [1.33, 3.74, 6.89], [-8, -9.71, 0]], 5.3)
    [[1.89, 3.77, 5.66], [0.25, 0.71, 1.3], [-1.51, -1.83, 0.0]]

Passing an empty matrix:

    >>> matrix_divided([], 1)
    Traceback (most recent call last):
                ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Passing a tuple as an argument:

    >>> matrix_divided((3, 6, 9), 12)
    Traceback (most recent call last):
                ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Dividing a matrix which its rows don't have the same size:

    >>> matrix_divided([[25, 14], [5.8, 17.1, -100, 12], [-6]], 3)
    Traceback (most recent call last):
                ...
    TypeError: Each row of the matrix must have the same size

Dividing a matrix which its rows don't have the same size 2:

    >>> matrix_divided([[2, 14], [3.8], [10, 1]], 16)
    Traceback (most recent call last):
                ...
    TypeError: Each row of the matrix must have the same size

Dividing a matrix which its elements aren't integer/float numbers:

    >>> matrix_divided([["Hello", "World"], ["Hello", "Hayden"]], 11)
    Traceback (most recent call last):
                ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Dividing a matrix which its elements aren't integer/float numbers 2:

    >>> matrix_divided([["1"], ["2", "3"], ["5", "6", "7"]], 8)
    Traceback (most recent call last):
                ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Dividing a matrix which some of its elements aren't integer/float numbers:

    >>> matrix_divided([[9.7, 0.8], ['86', 9.4], [0.1, '2'], [8.3, '0.2', 15.5]], 8)
    Traceback (most recent call last):
                ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Passing a matrix which one of its elements is an empty list:

    >>> matrix_divided([[9.0, 9.7], [], [100, -4]], 13)
    Traceback (most recent call last):
                ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Passing a matrix which one of its elements is a tuple:

    >>> matrix_divided([[1, -5], (28, -2), [93, -3]], 11)
    Traceback (most recent call last):
                ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Passing div as a list

    >>> matrix_divided([[5.7, 6.6], [2.7, 8.2]], [5])
    Traceback (most recent call last):
                ...
    TypeError: div must be a number

Passing div as a string

    >>> matrix_divided([[11, 8], [0, 29]], "15")
    Traceback (most recent call last):
                ...
    TypeError: div must be a number

Dividing a matrix which has positive and negative integer/float numbers

    >>> matrix_divided([[-1, 3.1, 0], [78, -103.7, 54]], 9.2)
    [[-0.11, 0.34, 0.0], [8.48, -11.27, 5.87]]
